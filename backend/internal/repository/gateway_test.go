package repository

import (
	"context"
	"github.com/gatewayorg/blue-dashboard/internal/model"
	"github.com/stretchr/testify/assert"
	"testing"
	"time"
)

var testMetrics = `{"hostName":"blue-gw","nginxVersion":"1.19.9","loadMsec":1634115435787,"nowMsec":1634711689546,"connections":{"active":1,"reading":0,"writing":1,"waiting":0,"accepted":24,"handled":24,"requests":995},"sharedZones":{"name":"ngx_http_vhost_traffic_status","maxSize":1048575,"usedSize":3510,"usedNode":1},"serverZones":{"_":{"requestCounter":994,"inBytes":256388,"outBytes":4025577,"responses":{"1xx":0,"2xx":993,"3xx":0,"4xx":1,"5xx":0,"miss":0,"bypass":0,"expired":0,"stale":0,"updating":0,"revalidated":0,"hit":0,"scarce":0},"requestMsecCounter":0,"requestMsec":0,"requestMsecs":{"timesmsecs":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"requestBuckets":{"msecs":[],"counters":[]},"overCounts":{"maxIntegerSize":18446744073709551615,"requestCounter":0,"inBytes":0,"outBytes":0,"1xx":0,"2xx":0,"3xx":0,"4xx":0,"5xx":0,"miss":0,"bypass":0,"expired":0,"stale":0,"updating":0,"revalidated":0,"hit":0,"scarce":0,"requestMsecCounter":0}},"*":{"requestCounter":994,"inBytes":256388,"outBytes":4025577,"responses":{"1xx":0,"2xx":993,"3xx":0,"4xx":1,"5xx":0,"miss":0,"bypass":0,"expired":0,"stale":0,"updating":0,"revalidated":0,"hit":0,"scarce":0},"requestMsecCounter":0,"requestMsec":0,"requestMsecs":{"timesmsecs":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"requestBuckets":{"msecs":[],"counters":[]},"overCounts":{"maxIntegerSize":18446744073709551615,"requestCounter":0,"inBytes":0,"outBytes":0,"1xx":0,"2xx":0,"3xx":0,"4xx":0,"5xx":0,"miss":0,"bypass":0,"expired":0,"stale":0,"updating":0,"revalidated":0,"hit":0,"scarce":0,"requestMsecCounter":0}}}}`

func TestGatewayImpl_AddMetrics(t *testing.T) {
	tx := testRepo.Begin()
	ctx := testRepo.ContextWithTx(context.Background(), tx)
	defer tx.Rollback()

	testGateway.AddMetrics(ctx, &model.GatewayMetrics{
		Ip:          "191.168.0.2",
		MetricsByte: []byte(testMetrics),
		CreatedAt:   time.Now(),
	})
}

func TestGatewayImpl_GetMetricsInTime(t *testing.T) {
	metrics, err := testGateway.GetMetricsInTime(context.Background(), time.Now().Add(-time.Hour*24), time.Now())
	assert.NoError(t, err)
	t.Log(metrics)
}
