syntax = "proto3";

package dashboard.user;

option go_package = "github.com/gatewayorg/blue-dashboard/api/protos/user;user";

import "user/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

service PublicUser {
    rpc Login(LoginReq) returns(LoginResp) {
        option (google.api.http) = {
            post: "/user/login"
            body: "*"
        };
    }

    rpc GetList(GetListReq) returns(GetListResp) {
        option (google.api.http) = {
            get: "/user/list"
        };
    }

    rpc Add(AddReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/user/add"
            body: "*"
        };
    }

    rpc Update(UpdateReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/user"
            body: "*"
        };
    }

    rpc UpdatePwd(UpdatePwdReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/user/pwd"
            body: "*"
        };
    }

    rpc SetStatus(SetStatusReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/user/status"
            body: "*"
        };
    }

    rpc SelectRole(SelectRoleReq) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/user/select/role"
            body: "*"
        };
    }

    rpc Delete(DeleteReq) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/user/del"
        };
    }
}


message LoginReq {
    string username = 1 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string password = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
}

message LoginResp {
    string access_token = 1;
}

message SelectRoleReq {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
    uint64 role_id = 2 [(validate.rules).uint64.gt = 0];
}

message GetListReq {
    uint64 page = 1 [(validate.rules).uint64.gt = 0];
    uint64 page_size = 2 [(validate.rules).uint64.gt = 0];
}

message GetListResp {
    uint64 total = 1;
    repeated dashboard.user.user data = 2;
}

message AddReq {
    string username = 1 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string passwd = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string name = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    uint64 role_id = 4 [(validate.rules).uint64.gt = 0];
    bool enable = 5;
}

message UpdateReq {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
    uint64 role_id = 3 [(validate.rules).uint64.gt = 0];
    bool enable = 4;
}

message UpdatePwdReq {
    string old_passwd = 1;
    string new_passwd = 2;
}

message SetStatusReq {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
    bool enable = 2;
}

message DeleteReq {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
}



