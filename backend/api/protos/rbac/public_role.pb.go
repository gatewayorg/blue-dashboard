// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: rbac/public_role.proto

package rbac

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Role `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListResp) Reset() {
	*x = GetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_public_role_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResp) ProtoMessage() {}

func (x *GetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_public_role_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResp.ProtoReflect.Descriptor instead.
func (*GetListResp) Descriptor() ([]byte, []int) {
	return file_rbac_public_role_proto_rawDescGZIP(), []int{0}
}

func (x *GetListResp) GetData() []*Role {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Enable bool   `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *AddRoleReq) Reset() {
	*x = AddRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_public_role_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRoleReq) ProtoMessage() {}

func (x *AddRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_public_role_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRoleReq.ProtoReflect.Descriptor instead.
func (*AddRoleReq) Descriptor() ([]byte, []int) {
	return file_rbac_public_role_proto_rawDescGZIP(), []int{1}
}

func (x *AddRoleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddRoleReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *AddRoleReq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Enable bool   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateRoleReq) Reset() {
	*x = UpdateRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_public_role_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleReq) ProtoMessage() {}

func (x *UpdateRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_public_role_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleReq) Descriptor() ([]byte, []int) {
	return file_rbac_public_role_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRoleReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRoleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRoleReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateRoleReq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type DelRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelRoleReq) Reset() {
	*x = DelRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_public_role_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRoleReq) ProtoMessage() {}

func (x *DelRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_public_role_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRoleReq.ProtoReflect.Descriptor instead.
func (*DelRoleReq) Descriptor() ([]byte, []int) {
	return file_rbac_public_role_proto_rawDescGZIP(), []int{3}
}

func (x *DelRoleReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_rbac_public_role_proto protoreflect.FileDescriptor

var file_rbac_public_role_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x1a, 0x11, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x25, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x32, 0xb5, 0x03, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x72, 0x62, 0x61, 0x63,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x1a, 0x0a, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x4d, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x5a, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x3b, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x6f, 0x72, 0x67, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x3b, 0x72, 0x62, 0x61, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbac_public_role_proto_rawDescOnce sync.Once
	file_rbac_public_role_proto_rawDescData = file_rbac_public_role_proto_rawDesc
)

func file_rbac_public_role_proto_rawDescGZIP() []byte {
	file_rbac_public_role_proto_rawDescOnce.Do(func() {
		file_rbac_public_role_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_public_role_proto_rawDescData)
	})
	return file_rbac_public_role_proto_rawDescData
}

var file_rbac_public_role_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rbac_public_role_proto_goTypes = []interface{}{
	(*GetListResp)(nil),   // 0: dashboard.rbac.GetListResp
	(*AddRoleReq)(nil),    // 1: dashboard.rbac.AddRoleReq
	(*UpdateRoleReq)(nil), // 2: dashboard.rbac.UpdateRoleReq
	(*DelRoleReq)(nil),    // 3: dashboard.rbac.DelRoleReq
	(*Role)(nil),          // 4: dashboard.rbac.Role
	(*empty.Empty)(nil),   // 5: google.protobuf.Empty
	(*RoleRule)(nil),      // 6: dashboard.rbac.RoleRule
}
var file_rbac_public_role_proto_depIdxs = []int32{
	4, // 0: dashboard.rbac.GetListResp.data:type_name -> dashboard.rbac.Role
	5, // 1: dashboard.rbac.PublicRole.GetList:input_type -> google.protobuf.Empty
	1, // 2: dashboard.rbac.PublicRole.Add:input_type -> dashboard.rbac.AddRoleReq
	2, // 3: dashboard.rbac.PublicRole.Update:input_type -> dashboard.rbac.UpdateRoleReq
	3, // 4: dashboard.rbac.PublicRole.Del:input_type -> dashboard.rbac.DelRoleReq
	6, // 5: dashboard.rbac.PublicRole.SelectRule:input_type -> dashboard.rbac.RoleRule
	0, // 6: dashboard.rbac.PublicRole.GetList:output_type -> dashboard.rbac.GetListResp
	5, // 7: dashboard.rbac.PublicRole.Add:output_type -> google.protobuf.Empty
	5, // 8: dashboard.rbac.PublicRole.Update:output_type -> google.protobuf.Empty
	5, // 9: dashboard.rbac.PublicRole.Del:output_type -> google.protobuf.Empty
	5, // 10: dashboard.rbac.PublicRole.SelectRule:output_type -> google.protobuf.Empty
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rbac_public_role_proto_init() }
func file_rbac_public_role_proto_init() {
	if File_rbac_public_role_proto != nil {
		return
	}
	file_rbac_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rbac_public_role_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_public_role_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_public_role_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_public_role_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_public_role_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_public_role_proto_goTypes,
		DependencyIndexes: file_rbac_public_role_proto_depIdxs,
		MessageInfos:      file_rbac_public_role_proto_msgTypes,
	}.Build()
	File_rbac_public_role_proto = out.File
	file_rbac_public_role_proto_rawDesc = nil
	file_rbac_public_role_proto_goTypes = nil
	file_rbac_public_role_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicRoleClient is the client API for PublicRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicRoleClient interface {
	GetList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetListResp, error)
	Add(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Del(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SelectRule(ctx context.Context, in *RoleRule, opts ...grpc.CallOption) (*empty.Empty, error)
}

type publicRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicRoleClient(cc grpc.ClientConnInterface) PublicRoleClient {
	return &publicRoleClient{cc}
}

func (c *publicRoleClient) GetList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetListResp, error) {
	out := new(GetListResp)
	err := c.cc.Invoke(ctx, "/dashboard.rbac.PublicRole/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRoleClient) Add(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dashboard.rbac.PublicRole/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRoleClient) Update(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dashboard.rbac.PublicRole/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRoleClient) Del(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dashboard.rbac.PublicRole/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRoleClient) SelectRule(ctx context.Context, in *RoleRule, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dashboard.rbac.PublicRole/SelectRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicRoleServer is the server API for PublicRole service.
type PublicRoleServer interface {
	GetList(context.Context, *empty.Empty) (*GetListResp, error)
	Add(context.Context, *AddRoleReq) (*empty.Empty, error)
	Update(context.Context, *UpdateRoleReq) (*empty.Empty, error)
	Del(context.Context, *DelRoleReq) (*empty.Empty, error)
	SelectRule(context.Context, *RoleRule) (*empty.Empty, error)
}

// UnimplementedPublicRoleServer can be embedded to have forward compatible implementations.
type UnimplementedPublicRoleServer struct {
}

func (*UnimplementedPublicRoleServer) GetList(context.Context, *empty.Empty) (*GetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedPublicRoleServer) Add(context.Context, *AddRoleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedPublicRoleServer) Update(context.Context, *UpdateRoleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPublicRoleServer) Del(context.Context, *DelRoleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedPublicRoleServer) SelectRule(context.Context, *RoleRule) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRule not implemented")
}

func RegisterPublicRoleServer(s *grpc.Server, srv PublicRoleServer) {
	s.RegisterService(&_PublicRole_serviceDesc, srv)
}

func _PublicRole_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoleServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.rbac.PublicRole/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoleServer).GetList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRole_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoleServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.rbac.PublicRole/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoleServer).Add(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRole_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.rbac.PublicRole/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoleServer).Update(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRole_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoleServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.rbac.PublicRole/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoleServer).Del(ctx, req.(*DelRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRole_SelectRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoleServer).SelectRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.rbac.PublicRole/SelectRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoleServer).SelectRule(ctx, req.(*RoleRule))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicRole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.rbac.PublicRole",
	HandlerType: (*PublicRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _PublicRole_GetList_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PublicRole_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PublicRole_Update_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _PublicRole_Del_Handler,
		},
		{
			MethodName: "SelectRule",
			Handler:    _PublicRole_SelectRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/public_role.proto",
}
