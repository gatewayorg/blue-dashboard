// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rbac/public_role.proto

package rbac

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _public_role_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPage() <= 0 {
		return GetRoleReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPageSize() <= 0 {
		return GetRoleReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetRoleReqValidationError is the validation error returned by
// GetRoleReq.Validate if the designated constraints aren't met.
type GetRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReqValidationError) ErrorName() string { return "GetRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReqValidationError{}

// Validate checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRoleRespValidationError is the validation error returned by
// GetRoleResp.Validate if the designated constraints aren't met.
type GetRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRespValidationError) ErrorName() string { return "GetRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRespValidationError{}

// Validate checks the field values on AddRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return AddRoleReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDetail()); l < 1 || l > 255 {
		return AddRoleReqValidationError{
			field:  "Detail",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	// no validation rules for Enable

	return nil
}

// AddRoleReqValidationError is the validation error returned by
// AddRoleReq.Validate if the designated constraints aren't met.
type AddRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleReqValidationError) ErrorName() string { return "AddRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleReqValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return UpdateRoleReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDetail()); l < 1 || l > 255 {
		return UpdateRoleReqValidationError{
			field:  "Detail",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	// no validation rules for Enable

	return nil
}

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on SetStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SetStatusReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return SetStatusReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Enable

	return nil
}

// SetStatusReqValidationError is the validation error returned by
// SetStatusReq.Validate if the designated constraints aren't met.
type SetStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStatusReqValidationError) ErrorName() string { return "SetStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e SetStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStatusReqValidationError{}

// Validate checks the field values on DelRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DelRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DelRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DelRoleReqValidationError is the validation error returned by
// DelRoleReq.Validate if the designated constraints aren't met.
type DelRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleReqValidationError) ErrorName() string { return "DelRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleReqValidationError{}
