// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: index/public_index.proto

package index

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _public_index_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on IndexReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IndexReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetStart() <= 0 {
		return IndexReqValidationError{
			field:  "Start",
			reason: "value must be greater than 0",
		}
	}

	if m.GetEnd() <= 0 {
		return IndexReqValidationError{
			field:  "End",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// IndexReqValidationError is the validation error returned by
// IndexReq.Validate if the designated constraints aren't met.
type IndexReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexReqValidationError) ErrorName() string { return "IndexReqValidationError" }

// Error satisfies the builtin error interface
func (e IndexReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexReqValidationError{}

// Validate checks the field values on SharedMem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SharedMem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxSize

	// no validation rules for UsedSize

	// no validation rules for UsedNode

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharedMemValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SharedMemValidationError is the validation error returned by
// SharedMem.Validate if the designated constraints aren't met.
type SharedMemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedMemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedMemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedMemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedMemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedMemValidationError) ErrorName() string { return "SharedMemValidationError" }

// Error satisfies the builtin error interface
func (e SharedMemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedMem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedMemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedMemValidationError{}

// Validate checks the field values on Connections with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Connections) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Accepted

	// no validation rules for Active

	// no validation rules for Handled

	// no validation rules for Reading

	// no validation rules for Requests

	// no validation rules for Waiting

	// no validation rules for Writing

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectionsValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConnectionsValidationError is the validation error returned by
// Connections.Validate if the designated constraints aren't met.
type ConnectionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionsValidationError) ErrorName() string { return "ConnectionsValidationError" }

// Error satisfies the builtin error interface
func (e ConnectionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnections.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionsValidationError{}

// Validate checks the field values on RequestTotal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RequestTotal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InBytes

	// no validation rules for OutBytes

	// no validation rules for X1Xx

	// no validation rules for X2Xx

	// no validation rules for X3Xx

	// no validation rules for X4Xx

	// no validation rules for X5Xx

	return nil
}

// RequestTotalValidationError is the validation error returned by
// RequestTotal.Validate if the designated constraints aren't met.
type RequestTotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTotalValidationError) ErrorName() string { return "RequestTotalValidationError" }

// Error satisfies the builtin error interface
func (e RequestTotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTotal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTotalValidationError{}

// Validate checks the field values on CacheTotal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CacheTotal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Miss

	// no validation rules for Bypass

	// no validation rules for Expired

	// no validation rules for Stale

	// no validation rules for Updating

	// no validation rules for Revalidated

	// no validation rules for Hit

	// no validation rules for Scarce

	return nil
}

// CacheTotalValidationError is the validation error returned by
// CacheTotal.Validate if the designated constraints aren't met.
type CacheTotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CacheTotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CacheTotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CacheTotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CacheTotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CacheTotalValidationError) ErrorName() string { return "CacheTotalValidationError" }

// Error satisfies the builtin error interface
func (e CacheTotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCacheTotal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CacheTotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CacheTotalValidationError{}

// Validate checks the field values on GatewayInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HostName

	// no validation rules for Version

	// no validation rules for Ip

	// no validation rules for Status

	for idx, item := range m.GetSharedMemory() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayInfoValidationError{
					field:  fmt.Sprintf("SharedMemory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConnections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayInfoValidationError{
					field:  fmt.Sprintf("Connections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRequestTotal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayInfoValidationError{
				field:  "RequestTotal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCacheTotal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayInfoValidationError{
				field:  "CacheTotal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayInfoValidationError is the validation error returned by
// GatewayInfo.Validate if the designated constraints aren't met.
type GatewayInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayInfoValidationError) ErrorName() string { return "GatewayInfoValidationError" }

// Error satisfies the builtin error interface
func (e GatewayInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayInfoValidationError{}

// Validate checks the field values on IndexResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IndexResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IndexRespValidationError is the validation error returned by
// IndexResp.Validate if the designated constraints aren't met.
type IndexRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexRespValidationError) ErrorName() string { return "IndexRespValidationError" }

// Error satisfies the builtin error interface
func (e IndexRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexRespValidationError{}
